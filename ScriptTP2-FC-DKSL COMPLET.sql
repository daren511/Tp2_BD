Drop table Retours;
Drop table Emprunts;
Drop table Exemplaires;
Drop table Adhérents;
Drop table Livres;

CREATE TABLE Adhérents
  (
    NumAdherant NUMBER NOT NULL ,
    Nom         VARCHAR2 (40) NOT NULL ,
    Prenom      VARCHAR2 (40)
  ) ;
ALTER TABLE Adhérents ADD CONSTRAINT Adhérents_PK PRIMARY KEY
(
  NumAdherant
)
;

CREATE TABLE Emprunts
  (
    NumPret         NUMBER NOT NULL ,
    NumExemplaire   NUMBER NOT NULL ,
    NumAdherant     NUMBER NOT NULL ,
    DateEmprunt     DATE NOT NULL ,
    DateRetouPrevue DATE
  ) ;
ALTER TABLE Emprunts ADD CONSTRAINT "Prets/Retours_PK" PRIMARY KEY
(
  NumPret
)
;

CREATE TABLE Exemplaires
  (
    NumExemplaire NUMBER NOT NULL ,
    NumLivre      NUMBER NOT NULL ,
    Disponible    CHAR (1) NOT NULL
  ) ;
ALTER TABLE Exemplaires ADD CONSTRAINT Exemplaires_PK PRIMARY KEY
(
  NumExemplaire
)
;

CREATE TABLE Livres
  (
    NumLivre NUMBER NOT NULL ,
    Titre    VARCHAR2 (40) NOT NULL ,
    Auteur   VARCHAR2 (40)
  ) ;
ALTER TABLE Livres ADD CONSTRAINT Livres_PK PRIMARY KEY
(
  NumLivre
)
;

CREATE TABLE Retours
  ( 
  NumPret NUMBER NOT NULL , DateRetour DATE
  ) ;
ALTER TABLE Retours ADD CONSTRAINT Retours_PK PRIMARY KEY
(
  NumPret
)
;

ALTER TABLE Emprunts ADD CONSTRAINT Emprunts_Adhérents_FK FOREIGN KEY ( NumAdherant ) REFERENCES Adhérents ( NumAdherant ) ;

ALTER TABLE Emprunts ADD CONSTRAINT Emprunts_Exemplaires_FK FOREIGN KEY ( NumExemplaire ) REFERENCES Exemplaires ( NumExemplaire ) ;

ALTER TABLE Exemplaires ADD CONSTRAINT Exemplaires_Livres_FK FOREIGN KEY ( NumLivre ) REFERENCES Livres ( NumLivre ) ;

ALTER TABLE Retours ADD CONSTRAINT Retours_Emprunts_FK FOREIGN KEY ( NumPret ) REFERENCES Emprunts ( NumPret ) ;

--TRIGGER
-----------------------------
create or replace 
trigger REMETTREDISPONIBLE 
AFTER UPDATE OF DATERETOURREEL ON RETOURS 
FOR EACH ROW
DECLARE
NUMEXEMPLAIREACHANGER NUMBER;
BEGIN
IF(:NEW.DATERETOURREEL IS NOT NULL)
THEN
SELECT NUMEXEMPLAIRE INTO NUMEXEMPLAIREACHANGER FROM emprunts WHERE NUMPRET = :NEW.NUMPRET;
UPDATE EXEMPLAIRES SET DISPONIBLE = 1 WHERE NUMEXEMPLAIRE = NUMEXEMPLAIREACHANGER;
END IF;
END;
--------------------
create or replace 
trigger MISEAJOURBIBLIO 
BEFORE INSERT OR DELETE OR UPDATE ON EMPRUNTS 
DECLARE MESSAGE EXCEPTION; 
 BEGIN 
 IF (TO_CHAR(SYSDATE,'DY')= 'SAM.' OR TO_CHAR(SYSDATE,'DY')= 'DIM.') 
 THEN RAISE MESSAGE; 
 END IF; 
 EXCEPTION 
 WHEN MESSAGE THEN RAISE_APPLICATION_ERROR(-20324,'ont ne met pas à jour la fin de semaine'); 
 END;
 --------------------
create or replace 
trigger AJOUTEREMPRUNTSRETOUR 
AFTER INSERT ON EMPRUNTS 
for each row
BEGIN
  insert into retours(Numpret,Dateretourreel) values (:new.numpret,null);
END;
 -------------------
 create or replace 
trigger TEMPNUMERO 
BEFORE INSERT ON EMPLOYESBIDON
for each row
BEGIN
 if :new.numemp is null then select SEQEMPLOYESBIDON.nextval into :new.numemp from dual;
END if;
end;
---------------------
create or replace 
trigger CHANGERDISPO 
AFTER INSERT ON emprunts 
FOR EACH ROW
BEGIN
  --SELECT NUMEXEMPLAIRE INTO NUMEXEMPLAIREACHANGER FROM EMPRUNTS WHERE NUMPRET = :new.NUMPRET;
  UPDATE EXEMPLAIRES SET DISPONIBLE = 0 WHERE NUMEXEMPLAIRE = :new.numexemplaire;
  NULL;
END;
---------------------
create or replace 
trigger INCADHERANTS
BEFORE INSERT ON ADHERENTS
for each row
BEGIN
 if :new.NUMADHERENT is null then select seqadherants.nextval into :new.NUMADHERENT from dual;
END if;
end;
---------------------
create or replace 
trigger INCEXEMPLAIRE 
BEFORE INSERT ON EXEMPLAIRES
for each row
BEGIN
 if :new.NUMEXEMPLAIRE is null then select SEQEXEMPLAIRE.nextval into :new.NUMEXEMPLAIRE from dual;
END if;
end;
---------------------
create or replace 
trigger INCPRETS
BEFORE INSERT ON EMPRUNTS
for each row
BEGIN
 if :new.NUMPRET is null then select seqprets.nextval into :new.numpret from dual;
END if;
end;
---------------------
create or replace 
trigger VERIFICATION 
BEFORE INSERT ON EMPRUNTS 
FOR EACH ROW
DECLARE
MESSAGE EXCEPTION;
DISPONIBILITE CHAR;
BEGIN
  SELECT DISPONIBLE INTO DISPONIBILITE FROM EXEMPLAIRES
  WHERE NUMEXEMPLAIRE = :new.NUMEXEMPLAIRE;
  IF(DISPONIBILITE = 0 )
  THEN
  Raise MESSAGE ;
  END IF;
  EXCEPTION WHEN MESSAGE THEN RAISE_APPLICATION_ERROR(-20325,'Le livre n est pas disponible');
  --NULL;
END;
---------------------
PACKAGES
---------------------
create or replace 
PACKAGE GESTIONADHERENTS AS 

TYPE ENRADHERENT is REF CURSOR;
  
PROCEDURE INSERTION(PNOM IN ADHERENTS.NOM%TYPE,
                      PPRENOM IN ADHERENTS.PRENOM%TYPE);
                      
PROCEDURE SUPPRIMER(PNUMADHERENT IN ADHERENTS.NUMADHERENT%TYPE);
  
PROCEDURE MODIFADHERENT(PNUMADHERENT IN ADHERENTS.NUMADHERENT%TYPE,
                        PNOM IN ADHERENTS.NOM%TYPE,
                        PPRENOM IN ADHERENTS.PRENOM%TYPE);
                          
FUNCTION CONSULADHERENT  RETURN ENRADHERENT;                      
  

END GESTIONADHERENTS;
---------------------
Body
---------------------
create or replace 
PACKAGE BODY GESTIONADHERENTS AS

  PROCEDURE INSERTION(PNOM IN ADHERENTS.NOM%TYPE,
                      PPRENOM IN ADHERENTS.PRENOM%TYPE) AS
  BEGIN
    INSERT INTO ADHERENTS(NOM,PRENOM)VALUES(PNOM,PPRENOM);
    --NULL;
  END INSERTION;

  PROCEDURE SUPPRIMER(PNUMADHERENT IN ADHERENTS.NUMADHERENT%TYPE) AS
  BEGIN
    DELETE FROM ADHERENTS WHERE NUMADHERENT = PNUMADHERENT;
    --NULL;
  END SUPPRIMER;

  PROCEDURE MODIFADHERENT(PNUMADHERENT IN ADHERENTS.NUMADHERENT%TYPE,
                          PNOM IN ADHERENTS.NOM%TYPE,
                          PPRENOM IN ADHERENTS.PRENOM%TYPE) AS
  BEGIN
    UPDATE ADHERENTS SET NOM = PNOM ,PRENOM = PPRENOM WHERE NUMADHERENT = PNUMADHERENT;
    --NULL;
  END MODIFADHERENT;

  FUNCTION CONSULADHERENT  RETURN ENRADHERENT AS RESULTAT ENRADHERENT; 
  BEGIN
    OPEN RESULTAT FOR SELECT NUMADHERENT,NOM,PRENOM FROM ADHERENTS;
    RETURN  RESULTAT;
    --NULL;
  END CONSULADHERENT;

END GESTIONADHERENTS;
---------------------
create or replace 
PACKAGE GESTIONEMPRUNTS AS 

TYPE ENREMPRUNTS is REF CURSOR;

PROCEDURE INSERTION(PNUMEXEMPLAIRE IN EMPRUNTS.NUMEXEMPLAIRE%TYPE,
                    PNUMADHERENT IN EMPRUNTS.NUMADHERENT%TYPE,
                    PDATEEMPRUNT IN EMPRUNTS.DATEEMPRUNT%TYPE,
                    PDATERETOURPREVU IN EMPRUNTS.DATERETOURPREVU%TYPE);
                    
PROCEDURE SUPPRIMER(PNUMPRET IN EMPRUNTS.NUMPRET%TYPE); 

  PROCEDURE MODIFEMPRUNT(PNUMPRET IN EMPRUNTS.NUMPRET%TYPE,
                        PDATERETOURPREVU IN EMPRUNTS.DATERETOURPREVU%TYPE);
                    
FUNCTION CONSULTEMPRUNTS RETURN ENREMPRUNTS;

FUNCTION CONSULNUMEXEMPLAIRE RETURN ENREMPRUNTS;

FUNCTION CONSULNUMADHERENT RETURN ENREMPRUNTS;

END GESTIONEMPRUNTS;
---------------------
BODY
---------------------
create or replace 
PACKAGE BODY GESTIONEMPRUNTS AS

  PROCEDURE INSERTION(PNUMEXEMPLAIRE IN EMPRUNTS.NUMEXEMPLAIRE%TYPE,
                      PNUMADHERENT IN EMPRUNTS.NUMADHERENT%TYPE,
                      PDATEEMPRUNT IN EMPRUNTS.DATEEMPRUNT%TYPE,
                      PDATERETOURPREVU IN EMPRUNTS.DATERETOURPREVU%TYPE) AS
  BEGIN
    INSERT INTO EMPRUNTS(NUMEXEMPLAIRE,NUMADHERENT,DATEEMPRUNT,DATERETOURPREVU)VALUES
                        (PNUMEXEMPLAIRE,PNUMADHERENT,PDATEEMPRUNT,PDATERETOURPREVU);
    --NULL;
  END INSERTION;

  PROCEDURE SUPPRIMER(PNUMPRET IN EMPRUNTS.NUMPRET%TYPE) AS
  BEGIN
    DELETE FROM EMPRUNTS WHERE NUMPRET = PNUMPRET;
    --NULL;
  END SUPPRIMER;

 -- LAISSER LE NUMADHERENT EN DEHORS DE LA MODIF??
  PROCEDURE MODIFEMPRUNT(PNUMPRET IN EMPRUNTS.NUMPRET%TYPE,
                        PDATERETOURPREVU IN EMPRUNTS.DATERETOURPREVU%TYPE) AS
  BEGIN
    UPDATE EMPRUNTS SET DATERETOURPREVU = PDATERETOURPREVU
                        WHERE NUMPRET=PNUMPRET;
   -- NULL;
  END MODIFEMPRUNT;

  FUNCTION CONSULTEMPRUNTS RETURN ENREMPRUNTS AS RESULTAT ENREMPRUNTS;
  BEGIN
    OPEN RESULTAT FOR SELECT NUMADHERENT,NUMPRET,NUMEXEMPLAIRE,DATEEMPRUNT,DATERETOURPREVU FROM EMPRUNTS;
    RETURN RESULTAT;
    --NULL;
  END CONSULTEMPRUNTS;
  
FUNCTION CONSULNUMEXEMPLAIRE RETURN ENREMPRUNTS AS RESULTAT ENREMPRUNTS;
BEGIN
    OPEN RESULTAT FOR SELECT NUMEXEMPLAIRE FROM exemplaires;
    RETURN RESULTAT;
END CONSULNUMEXEMPLAIRE;

FUNCTION CONSULNUMADHERENT RETURN ENREMPRUNTS AS RESULTAT ENREMPRUNTS;
BEGIN
    OPEN RESULTAT FOR SELECT NUMADHERENT FROM ADHERENTS;
    RETURN RESULTAT;
END CONSULNUMADHERENT;   
    
END GESTIONEMPRUNTS;
--------------------------
create or replace 
PACKAGE GESTIONEXEMPLAIRES AS 

TYPE ENREXEMPLAIRE is REF CURSOR;
  
PROCEDURE INSERTION(PNUMLIVRE IN EXEMPLAIRES.NUMLIVRE%TYPE,
                    PDISPONIBLE IN EXEMPLAIRES.DISPONIBLE%TYPE);
                      
PROCEDURE SUPPRIMER(PNUMEXEMPLAIRE IN EXEMPLAIRES.NUMEXEMPLAIRE%TYPE);
  
FUNCTION CONSULEXEMPLAIREPARLIVRE(PNUMLIVRE in LIVRES.NUMLIVRE%TYPE) RETURN ENREXEMPLAIRE;

END GESTIONEXEMPLAIRES;
---------------------------
BODY
---------------------------
create or replace 
PACKAGE BODY GESTIONEXEMPLAIRES AS

  PROCEDURE INSERTION(PNUMLIVRE IN EXEMPLAIRES.NUMLIVRE%TYPE,
                    PDISPONIBLE IN EXEMPLAIRES.DISPONIBLE%TYPE) AS
  BEGIN
    INSERT INTO EXEMPLAIRES (NUMLIVRE,DISPONIBLE)VALUES(PNUMLIVRE,PDISPONIBLE);
    --NULL;
  END INSERTION;

  PROCEDURE SUPPRIMER(PNUMEXEMPLAIRE IN EXEMPLAIRES.NUMEXEMPLAIRE%TYPE) AS
  BEGIN
    DELETE FROM EXEMPLAIRES WHERE NUMEXEMPLAIRE = PNUMEXEMPLAIRE;
    --NULL;
  END SUPPRIMER;

FUNCTION CONSULEXEMPLAIREPARLIVRE(PNUMLIVRE in LIVRES.NUMLIVRE%TYPE) RETURN ENREXEMPLAIRE AS RESULTAT ENREXEMPLAIRE;
BEGIN
  OPEN RESULTAT FOR SELECT NUMEXEMPLAIRE, NUMLIVRE FROM EXEMPLAIRES Where NUMLIVRE = PNUMLIVRE;
  RETURN RESULTAT;
END CONSULEXEMPLAIREPARLIVRE;

END GESTIONEXEMPLAIRES;
------------------------------
create or replace 
PACKAGE GESTIONLIVRES AS 

TYPE ENRLIVRES is REF CURSOR;

PROCEDURE INSERTION(PNUMLIVRE IN LIVRES.NUMLIVRE%TYPE,
                    PTITRE IN LIVRES.TITRE%TYPE,
                    PAUTEUR IN LIVRES.AUTEUR%TYPE);
                    
PROCEDURE SUPPRIMER(PNUMLIVRE IN LIVRES.NUMLIVRE%TYPE); 

PROCEDURE MODIFLIVRE(PNUMLIVRE IN LIVRES.NUMLIVRE%TYPE,
                     PTITRE IN LIVRES.TITRE%TYPE,
                     PAUTEUR IN LIVRES.AUTEUR%TYPE);
                    
FUNCTION CONSULTLIVRE RETURN ENRLIVRES;

FUNCTION CONSULTLIVREAUTEUR RETURN ENRLIVRES;

FUNCTION CONSULTLIVRETITRE(PTITRE IN LIVRES.TITRE%TYPE) RETURN ENRLIVRES;

FUNCTION CONSULTLIVREPLUSEMPRUNTE RETURN ENRLIVRES;

FUNCTION CONSULTLIVREEMPRUNTE RETURN ENRLIVRES;

FUNCTION CONSULTLIVRESUGGESTION(PDATEDEBUT IN EMPRUNTS.DATEEMPRUNT%TYPE,PDATEFIN IN EMPRUNTS.DATEEMPRUNT%TYPE) RETURN ENRLIVRES;

END GESTIONLIVRES;
-----------------------------
BODY
-----------------------------
create or replace 
PACKAGE BODY GESTIONLIVRES AS

  PROCEDURE INSERTION(PNUMLIVRE IN LIVRES.NUMLIVRE%TYPE,
                    PTITRE IN LIVRES.TITRE%TYPE,
                    PAUTEUR IN LIVRES.AUTEUR%TYPE) AS
  BEGIN
    INSERT INTO LIVRES (NUMLIVRE,TITRE,AUTEUR)VALUES(PNUMLIVRE,PTITRE,PAUTEUR);
    --NULL;
  END INSERTION;

  PROCEDURE SUPPRIMER(PNUMLIVRE IN LIVRES.NUMLIVRE%TYPE) AS
  BEGIN
    DELETE FROM LIVRES WHERE NUMLIVRE = PNUMLIVRE;
    --NULL;
  END SUPPRIMER;

  PROCEDURE MODIFLIVRE(PNUMLIVRE IN LIVRES.NUMLIVRE%TYPE,
                     PTITRE IN LIVRES.TITRE%TYPE,
                     PAUTEUR IN LIVRES.AUTEUR%TYPE) AS
  BEGIN
    UPDATE LIVRES SET TITRE=PTITRE , AUTEUR =PAUTEUR WHERE NUMLIVRE= PNUMLIVRE;
    --NULL;
  END MODIFLIVRE;

  FUNCTION CONSULTLIVRE RETURN ENRLIVRES AS RESULTAT ENRLIVRES;
  BEGIN
    OPEN RESULTAT FOR SELECT NUMLIVRE,TITRE,AUTEUR FROM LIVRES;
    RETURN  RESULTAT;
    --NULL;
  END CONSULTLIVRE;
  
FUNCTION CONSULTLIVREAUTEUR RETURN ENRLIVRES AS RESULTAT ENRLIVRES;
BEGIN
  OPEN RESULTAT FOR SELECT TITRE,AUTEUR FROM LIVRES GROUP BY AUTEUR,TITRE ORDER BY AUTEUR;
  RETURN RESULTAT;
END CONSULTLIVREAUTEUR;

FUNCTION CONSULTLIVRETITRE(PTITRE IN LIVRES.TITRE%TYPE) RETURN ENRLIVRES AS RESULTAT ENRLIVRES;
BEGIN
  OPEN RESULTAT FOR SELECT TITRE FROM LIVRES WHERE TITRE LIKE PTITRE||'%';
  RETURN RESULTAT;
END CONSULTLIVRETITRE;

FUNCTION CONSULTLIVREPLUSEMPRUNTE RETURN ENRLIVRES AS RESULTAT ENRLIVRES;
BEGIN
  OPEN RESULTAT FOR SELECT COUNT(EX.NUMEXEMPLAIRE) AS NBEXEMPLAIRE,COUNT(EM.NUMPRET)AS NOMBREPRET ,L.TITRE 
  FROM EXEMPLAIRES  EX 
  INNER JOIN LIVRES L ON EX.NUMLIVRE = L.NUMLIVRE INNER JOIN EMPRUNTS EM ON EM.NUMEXEMPLAIRE = EX.NUMEXEMPLAIRE
  GROUP BY EX.NUMEXEMPLAIRE,L.TITRE
  ORDER BY EX.NUMEXEMPLAIRE;
  RETURN RESULTAT;
END CONSULTLIVREPLUSEMPRUNTE;
  
FUNCTION CONSULTLIVREEMPRUNTE RETURN ENRLIVRES AS RESULTAT ENRLIVRES;
BEGIN
  OPEN RESULTAT FOR SELECT NUMEXEMPLAIRE,NUMLIVRE FROM EXEMPLAIRES WHERE DISPONIBLE = 0;
  RETURN RESULTAT;
END CONSULTLIVREEMPRUNTE;

FUNCTION CONSULTLIVRESUGGESTION(PDATEDEBUT IN EMPRUNTS.DATEEMPRUNT%TYPE,PDATEFIN IN emprunts.dateemprunt%TYPE) RETURN ENRLIVRES AS RESULTAT ENRLIVRES;
BEGIN
  OPEN RESULTAT FOR 
      SELECT L.TITRE,EM.NUMADHERENT,EX.NUMLIVRE
      FROM EMPRUNTS EM 
      INNER JOIN EXEMPLAIRES EX ON EM.NUMEXEMPLAIRE = EX.NUMEXEMPLAIRE
      INNER JOIN LIVRES L ON EX.NUMLIVRE = L.NUMLIVRE
  WHERE PDATEDEBUT >= EM.DATEEMPRUNT AND PDATEFIN <= EM.DATEEMPRUNT;
  RETURN RESULTAT;
END CONSULTLIVRESUGGESTION;

FUNCTION CONSULNUMLIVRE RETURN ENRLIVRES AS RESULTAT ENRLIVRES;
BEGIN
  OPEN RESULTAT FOR SELECT NUMLIVRE FROM LIVRES;
  RETURN RESULTAT;
END CONSULNUMLIVRE;

FUNCTION CONSULEXEMPLAIREPARLIVRE RETURN ENRLIVRES AS RESULTAT ENRLIVRES;
BEGIN
  OPEN RESULTAT FOR SELECT NUMEXEMPLAIRE, NUMLIVRE FROM EXEMPLAIRES;
  RETURN RESULTAT;
END CONSULEXEMPLAIREPARLIVRE;

END GESTIONLIVRES;
----------------------------------
create or replace 
PACKAGE GESTIONRETOURS AS 

TYPE ENRRETOUR IS REF CURSOR;

PROCEDURE INSERTION(PNUMPRET IN RETOURS.NUMPRET%TYPE,
                    PDATERETOURREEL IN RETOURS.DATERETOURREEL%TYPE);
                    
PROCEDURE SUPPRIMER(PNUMPRET IN RETOURS.NUMPRET%TYPE);

PROCEDURE MODIFRETOUR(PNUMPRET IN RETOURS.NUMPRET%TYPE,
                      PDATERETOURREEL IN RETOURS.DATERETOURREEL%TYPE);
                      
FUNCTION CONSULRETOUR RETURN ENRRETOUR;

FUNCTION CONSULNUMPRET RETURN ENRRETOUR;

END GESTIONRETOURS;
---------------------------------------
BODY
---------------------------------------

create or replace 
PACKAGE BODY GESTIONRETOURS AS

  PROCEDURE INSERTION(PNUMPRET IN RETOURS.NUMPRET%TYPE,
                    PDATERETOURREEL IN RETOURS.DATERETOURREEL%TYPE) AS
  BEGIN
    INSERT INTO RETOURS(NUMPRET,DATERETOURREEL)VALUES(PNUMPRET,PDATERETOURREEL);
    --NULL;
  END INSERTION;

  PROCEDURE SUPPRIMER(PNUMPRET IN RETOURS.NUMPRET%TYPE) AS
  BEGIN
    DELETE FROM RETOURS WHERE NUMPRET = PNUMPRET;
    --NULL;
  END SUPPRIMER;

  PROCEDURE MODIFRETOUR(PNUMPRET IN RETOURS.NUMPRET%TYPE,
                        PDATERETOURREEL IN RETOURS.DATERETOURREEL%TYPE) AS
  BEGIN
    UPDATE RETOURS SET DATERETOURREEL = PDATERETOURREEL WHERE numpret = pnumpret;
    --NULL;
  END MODIFRETOUR;

  FUNCTION CONSULRETOUR RETURN ENRRETOUR AS RESULTAT ENRRETOUR;
  BEGIN
    OPEN RESULTAT FOR SELECT NUMPRET,DATERETOURREEL FROM RETOURS;
    RETURN  RESULTAT;
    --NULL;
  END CONSULRETOUR;
  
FUNCTION CONSULNUMPRET RETURN ENRRETOUR AS RESULTAT ENRRETOUR;
 BEGIN
    OPEN RESULTAT FOR SELECT NUMPRET FROM EMPRUNTS;
    RETURN  RESULTAT;
    --NULL;
END CONSULNUMPRET;

END GESTIONRETOURS;

